{
  "mensagens": [
    {
      "title": "React Bootstrap",
      "body": "O framework front-end mais popular, reconstruído para React.",
      "author": "",
      "id": 1
    },
    {
      "title": "Heroku",
      "body": "Plataforma de nuvem como serviço que suporta várias linguagens de programação.",
      "author": "",
      "id": 2
    },
    {
      "title": "Java EE",
      "body": "O Java Platform, Enterprise Edition (Java EE) é o padrão em software corporativo orientado pela comunidade. O Java EE é desenvolvido usando o Java Community Process , com contribuições de especialistas do setor, organizações comerciais e de código aberto, grupos de usuários Java e inúmeras pessoas. Cada versão integra novos recursos que se alinham às necessidades do setor, aprimoram a portabilidade de aplicativos e aumentam a produtividade do desenvolvedor.",
      "author": "",
      "id": 3
    },
    {
      "title": "Folhas de Estilos CSS Dicas & Truques",
      "body": "CENTRALIZANDO COISAS\nUma tarefa comum em CSS é a centralização de textos e imagens. Existem três tipos de tarefas relacionadas à centralização:\n\nCentrar linhas de textos\nCentrar um bloco de texto ou uma imagem\nCentrar na vertical um bloco ou uma imagem\nAs recentes implementações das CSS nível 3 prevêem funcionalidades que permitem centrar elementos posicionados de forma absoluta:\n\nCentrar na vertical com CSS3\nCentrar na vertical e na horizontal com CSS3\nCentrar na viewport com CSS3\nCENTRAR LINHAS DE TEXTOS\nCentrar textos de títulos ou parágrafos é a mais simples e comum tarefa de centralização. Basta usar a propriedade CSS 'text-align', conforme mostrado a seguir:\n\nP { text-align: center }\nH2 { text-align: center }\nAs regras CSS mostradas renderizam cada uma das linhas de P ou de H2 centralizadas na horizontal conforme mostrado a seguir:\n\nTodas as linhas desse parágrafo estão centralizadas na horizontal, entre as margens do parágrafo graças ao valor 'center' declarado para a propriedade CSS 'text-align'.\n\nCENTRAR UM BLOCO OU UMA IMAGEM\nOutra tarefa de centralização consiste em centrar não um texto, mas um bloco como um todo. Dito de outra forma: definir margens esquerda e direirta iguais par um bloco. Para obter esse efeito usamos o valor 'auto' para a proriedade margin. É necessário que o bloco tenha uma largura fixa, pois em se tratando de blocos flexíveis ele assumira a largura total disponível. Observe o exemplo a seguir:\n\nP.blocktext {\n    margin-left: auto;\n    margin-right: auto;\n    width: 6em\n}\n...\n<P class=\"blocktext\">Esse bloco de texto...\nEsse bloco de texto com largura reduzida está centralizado. Notar que as linhas de texto do bloco não estão centralizadas (elas estão alinhadas à esquerda) ao contrário do que foi mostrado no exemplo anterior..\n\nEsta é, também, a técnica usada para centralizar uma imagem: defina nível de bloco para a imagem e o valor 'auto' para as margens esquerda e direita, conforme mostrado a seguir:\n\nIMG.displayed {\n    display: block;\n    margin-left: auto;\n    margin-right: auto }\n...\n<IMG class=\"displayed\" src=\"...\" alt=\"...\">\nA imagem mostrada está centralizada na horizontal:uma imagem randômica\nCENTRAR NA VERTICAL UM BLOCO OU UMA IMAGEM\nCSS nível 2 não prevê uma propriedade para centrar na vertical. Provavelmente haverá uma nas CSS nível 3 (ver adiante nesta página). Mas, até mesmo com uso das CSS2 você poderá centralizar blocos verticalmente combinando algumas propriedades. O \"truque\" consiste em formatar o bloco de conteúdo para se comportar com célula de tabela, pois conteúdos de células de tabela podem ser centralizados na vertical em CSS2.\n\nO exemplo mostrado a seguir centra um parágrafo inserido em um container de determinada altura. Um exemplo em página própria mostra um parágrafo centralizado verticalmente na janela do navegador, pois o parágrafo foi posicionado de forma absoluta em um container com a altura da janela do navegador.\n\nDIV.container {\n    min-height: 10em;\n    display: table-cell;\n    vertical-align: middle }\n...\n<DIV class=\"container\">\n  <P>Parágrafo curto centarlizado na vertical.\n</DIV>\nParágrafo curto centralizado na vertical.\n\nCENTRAR NA VERTICAL COM CSS3\nAs CSS3 oferecem outras possibilidades. No ano atual (2014), uma boa solução para centralizar verticalmente sem uso de posicionamento absoluto (que pode causar \"overlapping\" do texto) ainda está sendo discutido. Mas, caso o \"overlapping\" do texto não seja um problema no seu documento, você poderá usar a propriedade 'transform' para centralizar um elemento posicionado de forma absoluta, como mostrado a seguir:\n\nParágrafo centralizado na vertical.\nPara a marcação mostrada a seguir:\n\n<div class=container3>\n  <p>Parágrafo…\n</div>\nA folha de estilos é conforme mostrada a seguir:\n\ndiv.container3 {\n   height: 10em;\n   position: relative }              /* 1 */\ndiv.container3 p {\n   margin: 0;\n   position: absolute;               /* 2 */\n   top: 50%;                         /* 3 */\n   transform: translate(0, -50%) }   /* 4 */\nA chave para a solução é:\n\nDeclare o container posicionado de forma relativa com a finalidade de criar um contexto de posicionamento para os elementos posicionados de forma absoluta dentro dele, container.\nPosicione o elemento dentro do container de forma absoluta.\nDeclare, para o elemento dentro do container, coordenada 'top' de posicionamento igual a 50%. (Notar que 'top: 50%' significa 50% da altura do container.)\nUse 'translation' para deslocar o elemento dentro do container de um valor igual a metade da sua (do elemento) altura. (O valor '50%' em 'translate(0, -50%)' se refere à altura do próprio elemento.)\nRecentemente (desde 2015), criou-se outra técnica em diversas implementações das CSS. Tais técnicas se baseiam no novo valor 'flex' para a propriedade 'display'. Esse valor foi criado para uso em interfaces gráficas de usuário (GUIs), mas nada impoede que você a use em um documento desde que o documento seja estruturado correta e adequadamente, conforme exemplo mostrado a seguir:\n\nParágrafo centralizado na vertical.\n\ne a correspondente folha de estilos:\n\ndiv.container5 {\n  height: 10em;\n  display: flex;\n  align-items: center }\ndiv.container5 p {\n  margin: 0 }\nCENTRAR NA VERTICAL E NA HORIZONTAL COM CSS3\nPodemos combinar os dois métodos mostrados anteriormente para centrar na horizontal e na vertical ao mesmo tempo.\n\nUm efeito colateral de se declarar o parágrafo posicionado de forma absoluta é que ele assumirá uma largura estritamente necessária (a não ser, obviamente, que se declare explicitamente uma largura). No exemplo mostrado a seguir é exatamente isso que queremos: Centralizamos um parágrafo com uma só palavra (\"Centralizado!\") e sua largura é exatamente igual a largura da palavra. Observe a seguir:\n\nCentralizado!\nO fundo na cor amarela foi declarado com a finalidade de mostrar que a largura do parágrafo é exatamente a mesma largura do seu conteúdo (da palavra \"Centralizado!\"). Para o próximo exemplo considere a mesma marcação do exemplo anterior:\n\n<div class=container4>\n  <p>Centralizado!\n</div>\nEm relação a centralização vertical considere, também, a folha de estilos do exemplo anterior. Defina para o elemento P uma coordenada 'left' para a esquerda igual a 50% com uso da declaração 'left: 50%' e use a transformação 'translate' para mover o elemento 50% de sua largura para a esquerda. Observe a seguir:\n\ndiv.container4 {\n    height: 10em;\n    position: relative }\ndiv.container4 p {\n    margin: 0;\n    background: yellow;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    margin-right: -50%;\n    transform: translate(-50%, -50%) }\nNo exemplo mostrado a seguir uma explicação do porquê declarar 'margin-right: -50%' é necessário.\n\nHavendo suporte para CSS 'flex' fica fácil conforme mostrado a seguir:\n\nCentralizado!\n\ne a folha de estilos:\n\ndiv.container6 {\n  height: 10em;\n  display: flex;\n  align-items: center;\n  justify-content: center }\ndiv.container6 p {\n  margin: 0 }\nou seja, o único acréscimo foi a declaração 'justify-content: center'. Tal como previsto na especificação, a funcionalidade 'align-items' controla o alinhamento vertical dos conteúdos de um container 'flex' e a funcionalidade 'justify-content' controla o alinhamento horizontal daqueles conteúdos. (Na realidade estas funcionalidades são um pouco mais complexas do que seus nomes sugerem, mas em resumo esse exemplo simples mostra como funciona o alinhamento com uso de 'flex'). Um efeito colateral de 'flex' é que o elemento-filho, P nesse exemplo, assume a menor largura possível.\n\nCENTRAR NA VIEWPORT COM CSS3\nA viewport é o container \"default\" para elementos posicionados de forma absoluta. (Tratando-se de navegadores a viewport é a janela do navegador). Assim, centrar um elemento na viewport é uma tarefa bem simples. Observe a seguir um exemplo completo criado com sintaxe HTML5:\n\n<html>\n  <style>\n    body {\n        background: white }\n    section {\n        background: black;\n        color: white;\n        border-radius: 1em;\n        padding: 1em;\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        margin-right: -50%;\n        transform: translate(-50%, -50%) }\n  </style>\n  <section>\n    <h1>Fantástica centralização</h1>\n    <p>Esse bloco de texto está centralizado na vertical.\n    <p>E centralizado na horizontal também, caso a janela tenha dimensões suficientes.\n  </section>\nObserve um exemplo em página própria.\n\nA declaração 'margin-right: -50%' destina-se a compensar a declaração 'left: 50%'. A propriedade 'left' subtrai 50% da largura do elemento.\n\nRedimensione a janela do navegador: você poderá observar que cada sentença ocupa uma linha se a largura da janela for larga o suficiente. Em larguras de janela pequenas haverá quebras de linhas. Se remover a declração 'margin-right: -50%' e redimensionar a janela vai observar que as sentenças quebrarão ainda que a janela seja duas vezes mais larga que as linhas do texto.\n\n(Usar 'translate' para centralizar na viewport foi proposto pela primeira vez por “Charlie” em resposta a um questionemento no Stack Overflow.)",
      "author": "",
      "id": 4
    }
  ]
}